import asyncio
import datetime
import threading
import os
import json
import pytz
import datetime
from datetime import timedelta
from zoneinfo import ZoneInfo
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from http.server import BaseHTTPRequestHandler, HTTPServer
from dotenv import load_dotenv
from aiogram.exceptions import TelegramConflictError
from http.server import BaseHTTPRequestHandler, HTTPServer

BOT_START_TIME = datetime.datetime.now()

load_dotenv()
# ==========================================================
# üß† –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: DEV –∏–ª–∏ PROD
# ==========================================================
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MODE (–Ω–∞–ø—Ä–∏–º–µ—Ä, "dev" –∏–ª–∏ "prod")
MODE = os.getenv("MODE", "dev")
DEV_TOKEN = os.getenv("DEV_TOKEN")
PROD_TOKEN = os.getenv("PROD_TOKEN")

print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ: {MODE.upper()}")

if MODE == "prod":
    API_TOKEN = os.getenv("PROD_TOKEN")  # ‚ö†Ô∏è —Ç–æ–∫–µ–Ω –±–æ–µ–≤–æ–≥–æ –±–æ—Ç–∞ (Render)
else:
    API_TOKEN = os.getenv("DEV_TOKEN")  # ‚ö†Ô∏è —Ç–æ–∫–µ–Ω —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ (–ª–æ–∫–∞–ª—å–Ω–æ)

if not API_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API —Ç–æ–∫–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è DEV_TOKEN –∏–ª–∏ PROD_TOKEN.")

# ==========================================================
# üß† –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ==========================================================
ADMIN_ID = 770511678

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

TZ = ZoneInfo("Europe/Chisinau")  # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ú–æ–ª–¥–æ–≤—ã
REMINDERS_FILE = "reminders.json"

if not os.path.exists(REMINDERS_FILE):
    with open(REMINDERS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, ensure_ascii=False, indent=2)

print(f"[MODE] Running in {MODE} mode with token: {API_TOKEN[:5]}...")


# üìÜ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —á—ë—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏)
START_SEMESTER = datetime.date(2025, 9, 1)

schedule_even = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [
        {"num": 2, "subject": "Limba strƒÉinƒÉ", "teacher": "ARMA≈û S.", "room": "9-234", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "sem. Geometria descriptivƒÉ", "teacher": "GORBATIUC A.", "room": "9-122", "time": "11:30‚Äì13:00"},
        {"num": 4, "subject": "Limba rom√¢nƒÉ", "teacher": "CUCIUC V.", "room": "9-103", "time": "13:30‚Äì15:00"},
        {"num": 5, "subject": "lab. Tehnologii informa»õionale »ôi securitate ciberneticƒÉ", "teacher": "»òUVARI D.", "room": "9-P02", "time": "15:15‚Äì16:45"},
    ],
    "–í—Ç–æ—Ä–Ω–∏–∫": [
        {"num": 1, "subject": "Atelier design", "teacher": "RO≈ûCA P.", "room": "9-338 / 334", "time": "8:00‚Äì9:30"},
        {"num": 2, "subject": "Studiul formei", "teacher": "MA≈¢CAN-L√éSENCO Inga / BABUC S.", "room": "9-388 / 9-334", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "curs. EticƒÉ »ôi integritate academicƒÉ", "teacher": "COVALSCHI S.", "room": "9-204", "time": "11:30‚Äì13:00"},
        ],
    "–°—Ä–µ–¥–∞": [
        {"num": 4, "subject": "curs. Matematica", "teacher": "LEAH I.", "room": "9-234", "time": "13:30‚Äì15:00"}
        ],
    "–ß–µ—Ç–≤–µ—Ä–≥": [
        {"num": 2, "subject": "curs. Bazele compozi»õiei »ôi proiectarea de arhitecturƒÉ", "teacher": "OLEINIC S.", "room": "9-226", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "Atelier design", "teacher": "RO≈ûCA P / MA≈¢CAN-L√éSENCO I.", "room": "9-330", "time": "11:30‚Äì13:00"}
        ],
    "–ü—è—Ç–Ω–∏—Ü–∞": [
        {"num": 1, "subject": "curs. Istoria artelor plastice", "teacher": "TOCARCIUC A.", "room": "9-324", "time": "8:00‚Äì9:30"},
        {"num": 2, "subject": "curs. Tehnologii informa»õionale »ôi securitate ciberneticƒÉ", "teacher": "CUJBA R.", "room": "9-326", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "Desen tehnic", "teacher": "ANATI S.", "room": "9-120", "time": "11:30‚Äì13:00"}
        ]
}

schedule_odd = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [
        {"num": 2, "subject": "Limba strƒÉinƒÉ", "teacher": "ARMA≈û S.", "room": "9-234", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "sem. Geometria descriptivƒÉ", "teacher": "GORBATIUC A.", "room": "9-122", "time": "11:30‚Äì13:00"},
        {"num": 4, "subject": "Limba rom√¢nƒÉ ", "teacher": "CUCIUC V.", "room": "9-103", "time": "13:30‚Äì15:00"},
        {"num": 5, "subject": "Educa»õia fizicƒÉ", "teacher": "CARASTOIANOVA V.", "room": "Sala de sport", "time": "15:15‚Äì16:45"},
    ],
    "–í—Ç–æ—Ä–Ω–∏–∫": [
        {"num": 1, "subject": "Atelier design", "teacher": "RO≈ûCA P.", "room": "9-338 / 334", "time": "8:00‚Äì9:30"},
        {"num": 2, "subject": "Studiul formei", "teacher": "MA≈¢CAN-L√éSENCO Inga / BABUC S.", "room": "9-388 / 9-334", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "curs. EticƒÉ »ôi integritate academicƒÉ", "teacher": "COVALSCHI S.", "room": "9-204", "time": "11:30‚Äì13:00"},
        {"num": 4, "subject": "sem. Matematica", "teacher": "CIUHRII V.", "room": "9-234", "time": "13:30‚Äì15:00"},
        ],
    "–°—Ä–µ–¥–∞": [
        {"num": 1, "subject": "curs. Geometria descriptivƒÉ", "teacher": "»òTIRBUL I.", "room": " 9-122", "time": "8:00‚Äì9:30"},
        {"num": 2, "subject": "curs. Geometria descriptivƒÉ", "teacher": "»òTIRBUL I.", "room": " 9-122", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "curs. Matematica", "teacher": "LEAH I.", "room": "9-234", "time": "11:30‚Äì13:00"},
        {"num": 4, "subject": "curs. Matematica", "teacher": "LEAH I.", "room": "9-234", "time": "13:30‚Äì15:00"}
        ],
    "–ß–µ—Ç–≤–µ—Ä–≥": [
        {"num": 2, "subject": "curs. Bazele compozi»õiei »ôi proiectarea de arhitecturƒÉ", "teacher": "OLEINIC S.", "room": "9-226", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "Atelier design", "teacher": "RO≈ûCA P / MA≈¢CAN-L√éSENCO I.", "room": "9-330", "time": "11:30‚Äì13:00"},
        {"num": 4, "subject": "Atelier design", "teacher": "RO≈ûCA P / MA≈¢CAN-L√éSENCO I.", "room": "9-330", "time": "13:30‚Äì15:00"},
        ],
    "–ü—è—Ç–Ω–∏—Ü–∞": [
        {"num": 1, "subject": "curs. Istoria artelor plastice", "teacher": "TOCARCIUC A.", "room": "9-324", "time": "8:00‚Äì9:30"},
        {"num": 2, "subject": "curs. Tehnologii informa»õionale »ôi securitate ciberneticƒÉ", "teacher": "CUJBA R.", "room": "9-326", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "Desen tehnic", "teacher": "ANATI S.", "room": "9-120", "time": "11:30‚Äì13:00"}
        ]
}



# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ----------
async def check_token_conflict(bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    try:
        me = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω: {me.first_name} (@{me.username})")
    except TelegramConflictError:
        print("\n‚ùå [–û–®–ò–ë–ö–ê]: –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –±–æ—Ç–∞!")
        print("üìå –†–µ—à–µ–Ω–∏–µ:")
        print(" - –û—Å—Ç–∞–Ω–æ–≤–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–æ—Ç, –µ—Å–ª–∏ –¥–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render")
        print(" - –ò–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç ‚Äî –≤—ã–∫–ª—é—á–∏ Render, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å –ª–æ–∫–∞–ª—å–Ω–æ")
        print(" - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è DEV –∏ PROD\n")
        exit(1)



def is_even_week(start_date: datetime.date = datetime.date(2025, 9, 1)) -> bool:
    today = datetime.date.today()
    delta_weeks = (today - start_date).days // 7
    week_number = delta_weeks + 1  # –Ω–∞—á–∏–Ω–∞–µ–º —Å—á–∏—Ç–∞—Ç—å —Å 1
    return week_number % 2 == 0



def get_days_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day_–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
            InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day_–í—Ç–æ—Ä–Ω–∏–∫"),
            InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="day_–°—Ä–µ–¥–∞"),
        ],
        [
            InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="day_–ß–µ—Ç–≤–µ—Ä–≥"),
            InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day_–ü—è—Ç–Ω–∏—Ü–∞"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_schedule_keyboard(day: str, week_type: str):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–µ–¥–µ–ª—é", callback_data=f"switch_{day}_{week_type}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

def get_week_number_and_type(for_date: datetime.date, start_date: datetime.date = START_SEMESTER):
    delta_weeks = (for_date - start_date).days // 7
    week_number = delta_weeks + 1
    week_type = "even" if (week_number + 1) % 2 == 0 else "odd"  # üëà –¥–æ–±–∞–≤–ª–µ–Ω +1
    return week_number, week_type


def format_schedule(day: str, schedule: dict, week_type: str, group: str = "DIN-253", subgroup: str = "–í—Ç–æ—Ä–∞—è"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç"""
    week_number, week_type = get_week_number_and_type(datetime.date.today())
    header = (
        f"üìò –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ {day}\n"
        f"–ù–µ–¥–µ–ª—è ‚Ññ{week_number} ({'—á—ë—Ç–Ω–∞—è' if week_type == 'even' else '–Ω–µ—á—ë—Ç–Ω–∞—è'}) ‚Äì {subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞\n\n"
    )

    lessons = schedule.get(day, [])
    if not lessons:
        return header + "‚ùå –°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"

    lines = []
    for lesson in lessons:
        lines.append(
            f"{lesson['num']}. {lesson['subject']}\n"
            f"–ü—Ä–µ–ø–æ–¥: {lesson['teacher']}\n"
            f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n"
            f"–í—Ä–µ–º—è: {lesson['time']}\n"
        )

    return header + "\n".join(lines)

async def safe_edit(callback: types.CallbackQuery, new_text: str, new_markup: InlineKeyboardMarkup):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    try:
        if callback.message.text == new_text and callback.message.reply_markup == new_markup:
            return
        await callback.message.edit_text(new_text, reply_markup=new_markup, parse_mode="HTML")
    except Exception as e:
        if "message is not modified" not in str(e):
            raise


@dp.message(F.text == "/test_reminder")
async def test_reminder(message: types.Message):
    text = build_reminder_text_for_tomorrow()
    if text:
        await message.answer("‚úÖ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n" + text, parse_mode="HTML")
    else:
        await message.answer("‚ùå –ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.")


@dp.message(F.text == "/test_in_5min")
async def test_in_5min(message: types.Message):
    now = datetime.datetime.now(TZ)
    test_time = (now + datetime.timedelta(minutes=5)).strftime("%H:%M:%S")

    uid = str(message.from_user.id)
    reminders[uid] = {
        "enabled": True,
        "time": test_time
    }
    save_reminders()

    await message.answer(
        f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —è –æ—Ç–ø—Ä–∞–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç ‚Äî –≤ <b>{test_time}</b> (–ø–æ –ö–∏—à–∏–Ω—ë–≤—É).",
        parse_mode="HTML"
    )

@dp.message(F.text == "/reset_sent")
async def reset_sent_today(message: types.Message):
    uid = str(message.from_user.id)
    if uid in reminders:
        reminders[uid]["sent_today"] = False
        save_reminders()
        await message.answer("‚úÖ –§–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

@dp.message(F.text == "/export_reminders")
async def export_reminders(message: types.Message):
    """üì§ –í—ã–≥—Ä—É–∑–∫–∞ reminders.json —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not os.path.exists(REMINDERS_FILE):
        await message.answer("‚ùå –§–∞–π–ª reminders.json –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return

    await message.answer_document(types.FSInputFile(REMINDERS_FILE))
    await message.answer("‚úÖ –§–∞–π–ª —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω.")


class PingHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path in ("/", "/ping"):
            self.send_response(200)
            self.send_header("Content-type", "text/plain; charset=utf-8")
            self.end_headers()
            self.wfile.write("Bot is running ‚úÖ".encode("utf-8"))
        else:
            self.send_response(404)
            self.end_headers()

    def do_HEAD(self):
        if self.path in ("/", "/ping"):
            self.send_response(200)
            self.send_header("Content-type", "text/plain; charset=utf-8")
            self.end_headers()
        else:
            self.send_response(404)
            self.end_headers()


def start_http_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ –∑–∞–Ω—è—Ç."""
    port = int(os.environ.get("PORT", 8000))
    try:
        server = HTTPServer(("0.0.0.0", port), PingHandler)
        print(f"[PING] ‚úÖ HTTP server started on port {port}")
        threading.Thread(target=server.serve_forever, daemon=True).start()
    except OSError as e:
        if e.errno == 98:
            print(f"[PING] ‚ö†Ô∏è –ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
        else:
            raise

async def self_ping_loop():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–∏–Ω–≥—É–µ—Ç —Å–∞–º —Å–µ–±—è, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª."""
    import aiohttp

    url = os.getenv("PING_URL")  # URL —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ Render, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://telegram-schedule-bot-f1bf.onrender.com/ping

    if not url:
        print("[SELF-PING] ‚ö†Ô∏è PING_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º self-ping")
        return

    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    print(f"[SELF-PING] ‚úÖ {url} ‚Üí {resp.status}")
        except Exception as e:
            print(f"[SELF-PING] ‚ùå –û—à–∏–±–∫–∞ self-ping: {e}")

        await asyncio.sleep(300)  # üîÅ –ø–∏–Ω–≥—É–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


class ReminderState(StatesGroup):
    waiting_time = State()

reminders: dict[str, dict] = {}
last_sent: dict[str, str] = {}  # in-memory: {user_id: "YYYY-MM-DD"} —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∑–∞ –º–∏–Ω—É—Ç—É

def load_reminders():
    global reminders
    if os.path.exists(REMINDERS_FILE):
        try:
            with open(REMINDERS_FILE, "r", encoding="utf-8") as f:
                reminders = json.load(f)
        except Exception:
            reminders = {}
    else:
        reminders = {}

def save_reminders():
    tmp = REMINDERS_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(reminders, f, ensure_ascii=False, indent=2)
    os.replace(tmp, REMINDERS_FILE)

def normalize_time(inp: str) -> str | None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã:
    - "9" -> "09:00"
    - "21" -> "21:00"
    - "9:0" -> "09:00"
    - "21:5" -> "21:05"
    - "09:45" -> "09:45"
    """
    s = inp.strip().replace(" ", "")
    if s.isdigit():
        h = int(s)
        if 0 <= h <= 23:
            return f"{h:02d}:00"
        return None
    if ":" in s:
        parts = s.split(":")
        if len(parts) != 2:
            return None
        if not parts[0].isdigit() or not parts[1].isdigit():
            return None
        h = int(parts[0])
        m = int(parts[1])
        if 0 <= h <= 23 and 0 <= m <= 59:
            return f"{h:02d}:{m:02d}"
    return None

def ru_day_from_date(dt: datetime.date) -> str:
    # Monday=0..Sunday=6
    mapping = {0:"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",1:"–í—Ç–æ—Ä–Ω–∏–∫",2:"–°—Ä–µ–¥–∞",3:"–ß–µ—Ç–≤–µ—Ä–≥",4:"–ü—è—Ç–Ω–∏—Ü–∞",5:"–°—É–±–±–æ—Ç–∞",6:"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    return mapping[dt.weekday()]

def schedule_for_date(dt: datetime.date) -> tuple[str, list[dict]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å —É—á—ë—Ç–æ–º —á—ë—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏."""
    day_ru = ru_day_from_date(dt)
    _, week_type = get_week_number_and_type(dt)
    sch = schedule_even if week_type == "even" else schedule_odd
    return day_ru, sch.get(day_ru, [])

def is_reminder_day(dt: datetime.date) -> bool:
    # —Ö–æ—Ç–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –í–°-–ß–¢ (–≤—Å=6, –ø–Ω=0, –≤—Ç=1, —Å—Ä=2, —á—Ç=3)
    return dt.weekday() in {6, 0, 1, 2, 3}

def build_reminder_text_for_tomorrow() -> str | None:
    """–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞: –≤—Ä–µ–º—è/–∞—É–¥–∏—Ç–æ—Ä–∏—è/–ø—Ä–µ–¥–º–µ—Ç/–ø—Ä–µ–ø–æ–¥). –ï—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç ‚Äî None."""
    now = datetime.datetime.now(TZ)
    tomorrow = (now + datetime.timedelta(days=1)).date()

    # –µ—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –Ω–µ —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å –ø–æ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–µ ‚Äî –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None (–Ω–æ —Ç—ã —Å–∫–∞–∑–∞–ª, —á—Ç–æ –ø—É—Å—Ç—ã—Ö –¥–Ω–µ–π –Ω–µ—Ç –ø–æ –±—É–¥–Ω—è–º)
    day_ru, lessons = schedule_for_date(tomorrow)
    if not lessons:
        return None

    first = lessons[0]
    start_time = first["time"].split("‚Äì", 1)[0].strip()
    subject = first["subject"]
    teacher = first["teacher"]
    room = first["room"]

    return (f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ ({day_ru}) –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ <b>{start_time}</b>\n"
            f"üìò –ü—Ä–µ–¥–º–µ—Ç: <b>{subject}</b>\n"
            f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>{teacher}</b>\n"
            f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>{room}</b>")

def reminder_menu_text(user_id: int) -> str:
    data = reminders.get(str(user_id), {"enabled": False, "time": None})
    if data.get("enabled") and data.get("time"):
        return (f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö\n\n"
                f"–°–µ–π—á–∞—Å: <b>–í–ö–õ</b>\n"
                f"–í—Ä–µ–º—è: <b>{data['time']}</b> (–ø–æ –ö–∏—à–∏–Ω—ë–≤—É)\n"
                f"–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤—Å‚Äì—á—Ç –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.\n\n"
                f"–ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    return ("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö\n\n"
            "–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n"
            "–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç <b>–≤—Å‚Äì—á—Ç</b> (–¥–ª—è –ø–Ω‚Äì–ø—Ç).\n\n"
            "–ù–∞–∂–º–∏ ¬´–í–∫–ª—é—á–∏—Ç—å¬ª, –∏ —è –ø–æ–ø—Ä–æ—à—É —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 21, 21:00, 9, 9:05).")

def reminder_menu_kb(user_id: int) -> InlineKeyboardMarkup:
    data = reminders.get(str(user_id), {"enabled": False, "time": None})
    if data.get("enabled") and data.get("time"):
        kb = [
            [InlineKeyboardButton(text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="rem_time_change")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="rem_toggle_off")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    else:
        kb = [
            [InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="rem_toggle_on")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
@dp.message(F.text == "/start")
async def start_command(message: types.Message):
    first_name = message.from_user.first_name  # –±–µ—Ä—ë–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{first_name}</b>!\n\n"
        "üìÖ –Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∑–∞–Ω—è—Ç–∏–π.\n"
        "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ø–∞—Ä–∞—Ö –∏ –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üîî –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "üïê –ü–æ–∑–≤–æ–ª—è—é –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "üìò –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —á—ë—Ç–Ω–æ–π/–Ω–µ—á—ë—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏\n\n"
        "üìå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /menu –∏–ª–∏ /reminder."
    )
    await message.answer(text, parse_mode="HTML")

@dp.message(F.text == "/botinfo")
async def bot_info(message: types.Message):
    info_text = (
        "ü§ñ <b>Schedule Reminder Bot</b>\n"
        "üìÖ –í–µ—Ä—Å–∏—è: 1.0.0\n"
        "üìç –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @nervblyati\n"
        "üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Chisinau (UTC+3)\n"
        "üß† –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "   ‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∑–∞–Ω—è—Ç–∏–π\n"
        "   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á—ë—Ç–Ω—ã—Ö –∏ –Ω–µ—á—ë—Ç–Ω—ã—Ö –Ω–µ–¥–µ–ª—å\n"
        "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "\n"
        "üí° –ë–æ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!"
    )
    await message.answer(info_text, parse_mode="HTML")

def back_to_schedule_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )


@dp.message(F.text == "/info")
async def info_command(message: types.Message):
    help_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üîπ /menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "üîπ /reminder ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –ø–∞—Ä–∞—Ö\n"
        "üîπ /botinfo ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ\n"
        "üîπ /info ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "\n"
        "üí° –°–æ–≤–µ—Ç: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî –∏ –±–æ—Ç —Å–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç, –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞ –∑–∞–≤—Ç—Ä–∞!"
    )
    await message.answer(help_text, parse_mode="HTML")

class ReportStates(StatesGroup):
    waiting_for_text = State()

@dp.message(F.text == "/report")
async def report_start(message: types.Message, state: FSMContext):
    await message.answer(
        "üõ†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –±–∞–≥, —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è.\n"
        "üì® –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —è –ø–µ—Ä–µ–¥–∞–º –µ—ë —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )
    await state.set_state(ReportStates.waiting_for_text)

@dp.message(ReportStates.waiting_for_text)
async def report_received(message: types.Message, state: FSMContext):
    report_text = message.text
    user = message.from_user

    # üì© ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (—Ç–≤–æ–π Telegram ID)
    DEV_ID = 770511678  # <-- –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ–π

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
    await bot.send_message(
        DEV_ID,
        f"üêõ <b>–ù–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username})\n"
        f"üÜî ID: <code>{user.id}</code>\n\n"
        f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{report_text}",
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É üöÄ")
    await state.clear()

@dp.message(F.text == "/status")
async def status_handler(message: types.Message):
    now = datetime.datetime.now()
    uptime = now - BOT_START_TIME
    days, remainder = divmod(uptime.total_seconds(), 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, _ = divmod(remainder, 60)

    # üìä –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_users = [uid for uid, data in reminders.items() if data.get("enabled", False)]
    active_count = len(active_users)

    # üì¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∏—â–µ–º —Å–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
    last_sent_date = None
    if os.path.exists(REMINDERS_FILE):
        try:
            with open(REMINDERS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            # –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Ö—Ä–∞–Ω–∏—Ç—å last_sent_date –≥–ª–æ–±–∞–ª—å–Ω–æ ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ç–æ—á–Ω–µ–µ
            last_sent_date = max(
                (datetime.datetime.combine(datetime.date.today(), datetime.datetime.strptime(v["time"], "%H:%M").time())
                 for v in data.values() if "time" in v),
                default=None
            )
        except Exception:
            pass

    last_sent_str = last_sent_date.strftime("%d.%m.%Y %H:%M") if last_sent_date else "–µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å"

    # üìÖ –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    upcoming_list = []
    for uid, info in reminders.items():
        if info.get("enabled", False) and "time" in info:
            upcoming_list.append(f"‚Ä¢ UID {uid} ‚Äî {info['time']}")

    upcoming_text = "\n".join(upcoming_list) if upcoming_list else "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"

    # üì§ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    text = (
        "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
        f"‚è± Uptime: {int(days)} –¥–Ω. {int(hours)} —á. {int(minutes)} –º–∏–Ω.\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_count}\n"
        f"üì¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {last_sent_str}\n\n"
        f"üìÖ –°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{upcoming_text}"
    )

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", callback_data="back_to_menu")]
    ])

    await message.answer(text, parse_mode="HTML", reply_markup=back_to_schedule_kb())



@dp.message(F.text == "/menu")
async def start_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=get_days_keyboard())


@dp.callback_query()
async def callback_router(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except:
        pass

    data = callback.data

    # –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    if data == "back":
        await state.clear()  # üî• –°–ë–†–ê–°–´–í–ê–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await safe_edit(callback, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", get_days_keyboard())
        return

 # === –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if data == "reminder_open":
        await state.clear()  # üî• –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –≤–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è
        await safe_edit(callback, reminder_menu_text(callback.from_user.id), reminder_menu_kb(callback.from_user.id))
        return


    # === –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -> –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
    if data == "rem_toggle_on":
        await state.set_state(ReminderState.waiting_time)
        await safe_edit(callback,
                        "‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø–æ –ö–∏—à–∏–Ω—ë–≤—É).\n\n"
                        "–ü—Ä–∏–º–µ—Ä—ã: <code>21</code>, <code>21:00</code>, <code>9</code>, <code>9:05</code>",
                        InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚¨Ö –û—Ç–º–µ–Ω–∞", callback_data="reminder_open")]
                        ]))
        return

    # === –û—Ç–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if data == "rem_toggle_off":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="rem_off_yes"),
             InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="reminder_open")]
        ])
        await safe_edit(callback,
                        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?",
                        kb)
        return

    if data == "rem_off_yes":
        uid = str(callback.from_user.id)
        if uid in reminders:
            reminders[uid]["enabled"] = False
            save_reminders()
        await safe_edit(callback,
                        "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\n–ú–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.",
                        reminder_menu_kb(callback.from_user.id))
        return

    # === –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –∑–∞–ø—Ä–æ—Å
    if data == "rem_time_change":
        await state.set_state(ReminderState.waiting_time)
        await safe_edit(callback,
                        "‚è∞ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ø–æ –ö–∏—à–∏–Ω—ë–≤—É).\n–ü—Ä–∏–º–µ—Ä—ã: <code>21</code>, <code>21:00</code>, <code>9</code>, <code>9:05</code>",
                        InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚¨Ö –û—Ç–º–µ–Ω–∞", callback_data="reminder_open")]
                        ]))
        return




# –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω
    elif data.startswith("day_"):
        day = data.split("_", 1)[1]
        today = datetime.date.today()
        _, week_type = get_week_number_and_type(today)
        schedule = schedule_even if week_type == "even" else schedule_odd
        new_text = format_schedule(day, schedule, week_type)
        await safe_edit(callback, new_text, get_schedule_keyboard(day, week_type))


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
    elif data.startswith("switch_"):
        _, day, current_week = data.split("_")
        new_week = "odd" if current_week == "even" else "even"
        schedule = schedule_even if new_week == "even" else schedule_odd
        new_text = format_schedule(day, schedule, new_week)
        await safe_edit(callback, new_text, get_schedule_keyboard(day, new_week))



    await callback.answer()

# –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.message(ReminderState.waiting_time)
async def reminder_set_time(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    norm = normalize_time(raw)
    if not norm:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>21</code>, <code>21:00</code>, <code>9</code>, <code>9:05</code>", parse_mode="HTML")
        return

    uid = str(message.from_user.id)
    data = reminders.get(uid, {"enabled": False, "time": None})
    data["time"] = norm
    data["enabled"] = True
    reminders[uid] = data
    save_reminders()
    await state.clear()

    await message.answer(
        f"‚úÖ –ì–æ—Ç–æ–≤–æ! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å‚Äì—á—Ç –≤ <b>{norm}</b> (–ø–æ –ö–∏—à–∏–Ω—ë–≤—É).",
        parse_mode="HTML"
    )
    # –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    await message.answer(reminder_menu_text(message.from_user.id),
                         reply_markup=reminder_menu_kb(message.from_user.id),
                         parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /reminder (—Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∫–Ω–æ–ø–∫–∞)
@dp.message(F.text.in_({"/reminder", "reminder"}))
async def reminder_cmd(message: types.Message):
    await message.answer(reminder_menu_text(message.from_user.id),
                         reply_markup=reminder_menu_kb(message.from_user.id),
                         parse_mode="HTML")


# ---------- –ó–ê–ü–£–°–ö ----------
async def reminder_worker(bot: Bot):
    global reminders, last_sent, _last_reset_date  # ‚úÖ –æ–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
    tz = pytz.timezone("Europe/Chisinau")

    # —Å–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if "_last_reset_date" not in globals():
        _last_reset_date = None

    while True:
        now_dt = datetime.datetime.now(tz)
        now_hms = now_dt.strftime("%H:%M:%S")
        today = now_dt.date()

        # üåÖ –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
        if _last_reset_date != today:
            for _uid in list(reminders.keys()):
                reminders[_uid]["sent_today"] = False
            save_reminders()
            _last_reset_date = today
            print(f"[RESET] sent_today flags cleared for {today}")


        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω—É–∂–Ω—ã –≤—Å‚Äì—á—Ç (–ø–µ—Ä–µ–¥ –ø–Ω‚Äì–ø—Ç), –∑–Ω–∞—á–∏—Ç –≤ –ø—Ç/—Å–± –ù–ï —à–ª—ë–º
        if now_dt.weekday() in (4, 5):  # 4=–ü—Ç, 5=–°–±
            print(f"[SCAN] {now_hms} skip (Fri/Sat)")
            await asyncio.sleep(10)
            continue

        for uid, data in reminders.items():
            enabled = data.get("enabled", False)
            time_str = data.get("time")

            print(f"[SCAN] uid={uid} enabled={enabled} user_time={time_str} now={now_hms}")

            if not enabled or not time_str:
                continue

            # ‚úÖ –í–°–¢–ê–í–¨ –ó–î–ï–°–¨ –ù–û–í–´–ô –ö–û–î
            try:
                reminder_time = datetime.datetime.strptime(time_str, "%H:%M:%S").time()
            except ValueError:
                try:
                    reminder_time = datetime.datetime.strptime(time_str, "%H:%M").time()
                except ValueError:
                    print(f"[WARN] uid={uid} bad time format: {time_str}")
                    continue

            # ---- –†–ê–°–ß–Å–¢ Œît ----
            target_dt = tz.localize(datetime.datetime.combine(today, reminder_time))
            delta_s = (now_dt - target_dt).total_seconds()

            uid_str = str(uid)
            if "sent_today" not in reminders.get(uid_str, {}):
                reminders.setdefault(uid_str, {})["sent_today"] = False

            tomorrow = (now_dt + datetime.timedelta(days=1)).date()
            tomorrow_wd = tomorrow.weekday()
            is_allowed_day = tomorrow_wd in (0, 1, 2, 3, 4)

            BEFORE, AFTER = 2, 60
            in_window = (-BEFORE <= delta_s < AFTER)

            print(
                f"[CHECK] uid={uid} time={time_str} now={now_hms} delta={int(delta_s)}s "
                f"window={in_window} sent_today={reminders[uid_str]['sent_today']} "
                f"tomorrow_wd={tomorrow_wd} (0=Mon)"
            )

            if not is_allowed_day:
                print(f"[SKIP] uid={uid} ‚Äî –∑–∞–≤—Ç—Ä–∞ –Ω–µ —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å (—Å–±/–≤—Å)")
                continue

            if not in_window:
                continue

            if reminders[uid_str]["sent_today"]:
                print(f"[SKIP] uid={uid} ‚Äî —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è")
                continue

            # ---- –°–ë–û–† –¢–ï–ö–°–¢–ê –ò –û–¢–ü–†–ê–í–ö–ê ----
            day_ru, lessons = schedule_for_date(tomorrow)
            if lessons:
                first = lessons[0]
                text = (
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ ({day_ru}) –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ <b>{first['time']}</b>\n"
                    f"üìò –ü—Ä–µ–¥–º–µ—Ç: <b>{first['subject']}</b>\n"
                    f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>{first['teacher']}</b>\n"
                    f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>{first['room']}</b>"
                )
            else:
                text = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç üéâ"

            try:
                await bot.send_message(int(uid), text, parse_mode="HTML")
                reminders[uid_str]["sent_today"] = True
                save_reminders()
                print(f"[SEND] ‚úÖ uid={uid} at {now_hms}")
            except Exception as e:
                print(f"[ERROR] uid={uid} send failed: {e}")


        # –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await asyncio.sleep(10)



async def main():
    load_reminders()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è sent_today
    for uid, data in reminders.items():
        if "sent_today" not in data:
            data["sent_today"] = False
    save_reminders()

    # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π self-ping, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª
    asyncio.create_task(self_ping_loop())

    # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(reminder_worker(bot))

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    await check_token_conflict(bot)
    await dp.start_polling(bot)



if __name__ == "__main__":
    if "RENDER" in os.environ or os.getenv("PORT"):
        start_http_server()

    async def runner():
        # ‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
        await main()

    asyncio.run(runner())