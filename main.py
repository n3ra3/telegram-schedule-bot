import asyncio
import datetime
import threading
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from http.server import BaseHTTPRequestHandler, HTTPServer

API_TOKEN = "8196810650:AAEy59MV1Xmi0XJ8MiyL0wAZpyng_81SgFg"  

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

schedule_even = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [
        {"num": 2, "subject": "Limba strƒÉinƒÉ", "teacher": "ARMA≈û S.", "room": "9-234", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "sem. Geometria descriptivƒÉ", "teacher": "GORBATIUC A.", "room": "9-122", "time": "11:30‚Äì13:00"},
        {"num": 4, "subject": "Limba rom√¢nƒÉ", "teacher": "CUCIUC V.", "room": "9-103", "time": "13:30‚Äì15:00"},
        {"num": 5, "subject": "lab. Tehnologii informa»õionale »ôi securitate ciberneticƒÉ", "teacher": "»òUVARI D.", "room": "9-P02", "time": "15:15‚Äì16:45"},
    ],
    "–í—Ç–æ—Ä–Ω–∏–∫": [
        {"num": 1, "subject": "Atelier design", "teacher": "RO≈ûCA P.", "room": "9-338 / 334", "time": "8:00‚Äì9:30"},
        {"num": 2, "subject": "Studiul formei", "teacher": "MA≈¢CAN-L√éSENCO Inga / BABUC S.", "room": "9-388 / 9-334", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "curs. EticƒÉ »ôi integritate academicƒÉ", "teacher": "COVALSCHI S.", "room": "9-204", "time": "11:30‚Äì13:00"},
        ],
    "–°—Ä–µ–¥–∞": [
        {"num": 4, "subject": "curs. Matematica", "teacher": "LEAH I.", "room": "9-234", "time": "13:30‚Äì15:00"}
        ],
    "–ß–µ—Ç–≤–µ—Ä–≥": [
        {"num": 2, "subject": "curs. Bazele compozi»õiei »ôi proiectarea de arhitecturƒÉ", "teacher": "OLEINIC S.", "room": "9-226", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "Atelier design", "teacher": "RO≈ûCA P / MA≈¢CAN-L√éSENCO I.", "room": "9-330", "time": "11:30‚Äì13:00"}
        ],
    "–ü—è—Ç–Ω–∏—Ü–∞": [
        {"num": 1, "subject": "curs. Istoria artelor plastice", "teacher": "TOCARCIUC A.", "room": "9-324", "time": "8:00‚Äì9:30"},
        {"num": 2, "subject": "curs. Tehnologii informa»õionale »ôi securitate ciberneticƒÉ", "teacher": "CUJBA R.", "room": "9-326", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "Desen tehnic", "teacher": "ANATI S.", "room": "9-120", "time": "11:30‚Äì13:00"}
        ]
}

schedule_odd = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [
        {"num": 2, "subject": "Limba strƒÉinƒÉ", "teacher": "ARMA≈û S.", "room": "9-234", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "sem. Geometria descriptivƒÉ", "teacher": "GORBATIUC A.", "room": "9-122", "time": "11:30‚Äì13:00"},
        {"num": 4, "subject": "Limba rom√¢nƒÉ ", "teacher": "CUCIUC V.", "room": "9-103", "time": "13:30‚Äì15:00"},
        {"num": 5, "subject": "Educa»õia fizicƒÉ", "teacher": "CARASTOIANOVA V.", "room": "Sala de sport", "time": "15:15‚Äì16:45"},
    ],
    "–í—Ç–æ—Ä–Ω–∏–∫": [
        {"num": 1, "subject": "Atelier design", "teacher": "RO≈ûCA P.", "room": "9-338 / 334", "time": "8:00‚Äì9:30"},
        {"num": 2, "subject": "Studiul formei", "teacher": "MA≈¢CAN-L√éSENCO Inga / BABUC S.", "room": "9-388 / 9-334", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "curs. EticƒÉ »ôi integritate academicƒÉ", "teacher": "COVALSCHI S.", "room": "9-204", "time": "11:30‚Äì13:00"},
        {"num": 4, "subject": "sem. Matematica", "teacher": "CIUHRII V.", "room": "9-234", "time": "13:30‚Äì15:00"},
        ],
    "–°—Ä–µ–¥–∞": [
        {"num": 1, "subject": "curs. Geometria descriptivƒÉ", "teacher": "»òTIRBUL I.", "room": " 9-122", "time": "8:00‚Äì9:30"},
        {"num": 2, "subject": "curs. Geometria descriptivƒÉ", "teacher": "»òTIRBUL I.", "room": " 9-122", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "curs. Matematica", "teacher": "LEAH I.", "room": "9-234", "time": "11:30‚Äì13:00"},
        {"num": 4, "subject": "curs. Matematica", "teacher": "LEAH I.", "room": "9-234", "time": "13:30‚Äì15:00"}
        ],
    "–ß–µ—Ç–≤–µ—Ä–≥": [
        {"num": 2, "subject": "curs. Bazele compozi»õiei »ôi proiectarea de arhitecturƒÉ", "teacher": "OLEINIC S.", "room": "9-226", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "Atelier design", "teacher": "RO≈ûCA P / MA≈¢CAN-L√éSENCO I.", "room": "9-330", "time": "11:30‚Äì13:00"},
        {"num": 4, "subject": "Atelier design", "teacher": "RO≈ûCA P / MA≈¢CAN-L√éSENCO I.", "room": "9-330", "time": "13:30‚Äì15:00"},
        ],
    "–ü—è—Ç–Ω–∏—Ü–∞": [
        {"num": 1, "subject": "curs. Istoria artelor plastice", "teacher": "TOCARCIUC A.", "room": "9-324", "time": "8:00‚Äì9:30"},
        {"num": 2, "subject": "curs. Tehnologii informa»õionale »ôi securitate ciberneticƒÉ", "teacher": "CUJBA R.", "room": "9-326", "time": "9:45‚Äì11:15"},
        {"num": 3, "subject": "Desen tehnic", "teacher": "ANATI S.", "room": "9-120", "time": "11:30‚Äì13:00"}
        ]
}

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ----------


def is_even_week(start_date: datetime.date = datetime.date(2025, 9, 1)) -> bool:
    today = datetime.date.today()
    delta_weeks = (today - start_date).days // 7
    week_number = delta_weeks + 1  # –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
    return week_number % 2 == 0



def get_days_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day_–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
            InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day_–í—Ç–æ—Ä–Ω–∏–∫"),
            InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="day_–°—Ä–µ–¥–∞"),
        ],
        [
            InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="day_–ß–µ—Ç–≤–µ—Ä–≥"),
            InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day_–ü—è—Ç–Ω–∏—Ü–∞"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_schedule_keyboard(day: str, week_type: str):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–µ–¥–µ–ª—é", callback_data=f"switch_{day}_{week_type}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

def get_week_info_from_semester(start_date: datetime.date = datetime.date(2025, 9, 1)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –Ω–µ–¥–µ–ª–∏ –∏ –µ—ë —á—ë—Ç–Ω–æ—Å—Ç—å"""
    today = datetime.date.today()
    delta_weeks = (today - start_date).days // 7
    week_number = delta_weeks + 1  # —É—á–µ–±–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ —Å—á–∏—Ç–∞–µ–º —Å 1
    week_type = "even" if week_number % 2 == 0 else "odd"
    return week_number, week_type


def format_schedule(day: str, schedule: dict, week_type: str, group: str = "DIN-253", subgroup: str = "–í—Ç–æ—Ä–∞—è"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç"""
    week_number = datetime.date.today().isocalendar()[1]
    header = (
        f"üìò –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ {day}\n"
        f"–ù–µ–¥–µ–ª—è ‚Ññ{week_number} ({'—á—ë—Ç–Ω–∞—è' if week_type == 'even' else '–Ω–µ—á—ë—Ç–Ω–∞—è'}) ‚Äì {subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞\n\n"
    )

    lessons = schedule.get(day, [])
    if not lessons:
        return header + "‚ùå –°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"

    lines = []
    for lesson in lessons:
        lines.append(
            f"{lesson['num']}. {lesson['subject']}\n"
            f"–ü—Ä–µ–ø–æ–¥: {lesson['teacher']}\n"
            f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n"
            f"–í—Ä–µ–º—è: {lesson['time']}\n"
        )

    return header + "\n".join(lines)

async def safe_edit(callback: types.CallbackQuery, new_text: str, new_markup: InlineKeyboardMarkup):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    try:
        if callback.message.text == new_text and callback.message.reply_markup == new_markup:
            return
        await callback.message.edit_text(new_text, reply_markup=new_markup, parse_mode="HTML")
    except Exception as e:
        if "message is not modified" not in str(e):
            raise

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------

@dp.message(F.text == "/start")
async def start_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=get_days_keyboard())


@dp.callback_query()
async def callback_days(callback: types.CallbackQuery):
    data = callback.data

    # –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    if data == "back":
        await safe_edit(callback, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", get_days_keyboard())

# –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω
    elif data.startswith("day_"):
        day = data.split("_", 1)[1]
        week_type = "even" if is_even_week() else "odd"
        schedule = schedule_even if week_type == "even" else schedule_odd
        new_text = format_schedule(day, schedule, week_type)
        await safe_edit(callback, new_text, get_schedule_keyboard(day, week_type))

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
    elif data.startswith("switch_"):
        _, day, current_week = data.split("_")
        new_week = "odd" if current_week == "even" else "even"
        schedule = schedule_even if new_week == "even" else schedule_odd
        new_text = format_schedule(day, schedule, new_week)
        await safe_edit(callback, new_text, get_schedule_keyboard(day, new_week))



    await callback.answer()

class PingHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running!")

def run_server():
    port = int(os.environ.get("PORT", 8000))
    server = HTTPServer(("0.0.0.0", port), PingHandler)
    server.serve_forever()

threading.Thread(target=run_server, daemon=True).start()

# ---------- –ó–ê–ü–£–°–ö ----------

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
